{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","message","state","setstate","useForm","register","handleSubmit","names","onSubmit","passedObject","userName","parseInt","cardNumber","cvv","pin","amount","denomination","axios","post","then","res","prevState","catch","err","console","log","type","placeholder","name","ref","defaultValue","value","Object","keys","forEach","key","push","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"qQA8DeA,MA1Df,WAAgB,IAAD,EAEaC,mBAAS,CAACC,KAAK,GAAGC,QAAQ,KAFvC,mBAENC,EAFM,KAECC,EAFD,OAGoBC,cAA1BC,EAHM,EAGNA,SAAUC,EAHJ,EAGIA,aACbC,EAAQ,GAeZ,OACE,oCACA,0BAAMC,SAAUF,GAbD,SAACN,GAChB,IAAIS,EAAe,CAAC,SAAWT,EAAKU,SAAS,WAAaC,SAASX,EAAKY,YAAY,IAAMD,SAASX,EAAKa,KAAK,IAAMF,SAASX,EAAKc,KAAK,OAASH,SAASX,EAAKe,QAAQ,aAAef,EAAKgB,cACzLC,IAAMC,KAAK,6CAA6CT,GACvDU,MAAK,SAAAC,GACJjB,GAAS,SAACkB,GACR,MAAO,CAACpB,QAAQmB,EAAIpB,KAAKC,QAAQD,KAAKoB,EAAIpB,KAAKA,YAElDsB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,UAMd,oDACA,sFACA,2BAAOG,KAAK,OAAOC,YAAY,wBAAwBC,KAAK,WAAWC,IAAKxB,IAAW,6BACvF,2BAAOqB,KAAK,OAAOC,YAAY,mBAAmBC,KAAK,aAAaC,IAAKxB,IAAW,6BACpF,2BAAOqB,KAAK,WAAWC,YAAY,UAAUC,KAAK,MAAMC,IAAKxB,IAAW,6BACxE,2BAAOqB,KAAK,WAAWC,YAAY,kBAAkBC,KAAK,MAAMC,IAAKxB,IAAW,6BAChF,2BAAOqB,KAAK,OAAOC,YAAY,mBAAmBC,KAAK,SAASC,IAAKxB,IAAW,6BAChF,+DACA,4BAAQuB,KAAK,eAAeC,IAAKxB,EAAUyB,aAAa,QACtD,4BAAQC,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,SACA,4BAAQA,MAAM,OAAd,UACA,4BAAQA,MAAM,OAAd,UACA,4BAAQA,MAAM,OAAd,UACA,4BAAQA,MAAM,QAAd,WACA,4BAAQA,MAAM,QAAd,SACO,6BACT,2BAAOL,KAAK,WACZ,0DAA+B,6BAAMxB,EAAMD,SAC1C+B,OAAOC,KAAK/B,EAAMF,MAAMkC,SAAQ,SAAAC,GAC3B5B,EAAM6B,KAAK,CAACD,EAAIjC,EAAMF,KAAKmC,QAKhC5B,EAAM8B,KAAI,SAAAT,GAAI,OACX,wBAAIO,IAAKP,EAAK,IAAd,MACMA,EAAK,GADX,MACkBA,EAAK,UC1CXU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACL7B,QAAQ6B,MAAMA,EAAMpD,c","file":"static/js/main.91e298bd.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {useForm} from 'react-hook-form';\nimport axios from 'axios';\nfunction App() {\n\n  const [state, setstate] = useState({data:'',message:''})\n  const {register, handleSubmit} = useForm();\n  let names = [];\n\n\n\n  const onSubmit = (data)=>{\n    var passedObject = {\"userName\":data.userName,\"cardNUmber\":parseInt(data.cardNumber),\"cvv\":parseInt(data.cvv),\"pin\":parseInt(data.pin),\"amount\":parseInt(data.amount),\"denomination\":data.denomination}\n    axios.post('https://basic-atm-api-gagan.herokuapp.com/',passedObject)\n    .then(res=>{\n      setstate((prevState)=> { \n        return {message:res.data.message,data:res.data.data}})\n    })\n    .catch(err=>{\n      console.log(err)\n    })\n  }\n  return (\n    <>\n    <form onSubmit={handleSubmit(onSubmit)}>\n    <h1>ATM MACHINE BY GAGAN</h1>\n    <p>demo user: gagan, CN: 999999999999, CVV: 123, PIN: 1234</p>\n    <input type=\"text\" placeholder=\"Card Holder Name.....\" name=\"userName\" ref={register}/><br/>\n    <input type=\"text\" placeholder=\"Card Number.....\" name=\"cardNumber\" ref={register}/><br/>\n    <input type=\"password\" placeholder=\"CVV....\" name=\"cvv\" ref={register}/><br/>\n    <input type=\"password\" placeholder=\"4-digit PIN....\" name=\"pin\" ref={register}/><br/>\n    <input type=\"text\" placeholder=\"Enter Amount....\" name=\"amount\" ref={register}/><br/>\n    <h3>Choose preferred denomination :</h3>\n    <select name=\"denomination\" ref={register} defaultValue=\"None\">\n      <option value=\"10\">Rs.10</option>\n      <option value=\"20\">Rs.20</option>\n      <option value=\"50\">Rs.50</option>\n      <option value=\"100\">Rs.100</option>\n      <option value=\"200\">Rs.200</option>\n      <option value=\"500\">Rs.500</option>\n      <option value=\"1000\">Rs.1000</option>\n      <option value=\"None\">None</option>\n    </select><br/>\n    <input type=\"submit\"/>  \n    <h4>Wait 10-15 sec for response<br/>{state.message}</h4>\n    {Object.keys(state.data).forEach(key => {\n          names.push([key,state.data[key]]) // key - value\n        })}\n\n\n     {\n     names.map(name => (\n        <li key={name[0]}>\n          Rs.{name[0]} x {name[1]}\n        </li>\n      ))}\n    </form>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}